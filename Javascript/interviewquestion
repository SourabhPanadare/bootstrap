/*-----------------------------------------------Interview Set One----------------------------------------*/

1. Possible ways to create object in javascript:-

   Object constructor:-
      var object = new Object();

   Object's create method:-
      var object = Object.create(null);

   Object literal syntax:-
      var object = {};

   Function constructor:-
      function Person(name){
        var object = {};
        object.name=name;
        object.age=21;
        return object;
      }
      var object = new Person("Sudheer");

   Function constructor with prototype:-
      function Person(){}
      Person.prototype.name = "Sudheer";
      var object = new Person();

   ES6 Class syntax:-
      class Person {
        constructor(name) {
          this.name = name;
        }
      }
      var object = new Person("Sudheer");

   Singleton pattern:-
      var object = new function(){
        this.name = "Sudheer";
      }

2. What is JSON(Javascript Object Notation):-
   Text-based data format following JavaScript object syntax.

   a. JSON.parse(text):- Converting a string to a native object.
   b. JSON.stringify(object):- Converting a native object to a string so it can be transmitted across the network.

   var obj = JSON.parse('{"firstName":"John", "lastName":"Doe"}');
   console.log(obj.firstName);:- John

   var obj = { name: "John", age: 30, city: "New York" };
   var myJSON = JSON.stringify(obj);
   console.log(myJSON);:- {"name":"John","age":30,"city":"New York"}

 3. Array slice method:-

    Slice() method returns the selected elements in an array as a new array object.

    let arrayIntegers = [1, 2, 3, 4, 5];
    let arrayIntegers1 = arrayIntegers.slice(2,2); :- [1,2]
    let arrayIntegers2 = arrayIntegers.slice(2,3); :- [3]
    let arrayIntegers3 = arrayIntegers.slice(4);   :- [4]

  4. Array Splice method:-

    Splice() method is used either adds/removes items to/from an array, and then returns the removed item.

    let arrayIntegers = [1, 2, 3, 4, 5];
    let arrayIntegers1 = arrayIntegers.splice(0,2); :- [1,2]
    let arrayIntegers2 = arrayIntegers.splice(3); :- [4,5]

  Slice vs Splice:-
      Slice:- Used to pick the elements from array.
      SPlice:- Used to insert or delete elements to/from array.

  5. Difference between == and === operators?
     "==":- coercion operator:- anytime if both values are same and compared using ==operator, type coercion happens.
     "===":- strictly equality :- Gives compilation error if you compare two variables, whose types are not compatible to each other

     ex:-
     0 == false   // true
     0 === false  // false

     1 == "1"     // true
     1 === "1"    // false
    "1" === "1"   //true

  6. Purpose of let keyword:-
      let:- Variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used.
      var:- Used to define a variable globally, or locally to an entire function regardless of block scope.

      function userDetails(username) {
         if(username) {
           console.log(salary); // undefined(due to hoisting)
           console.log(age); // error: age is not defined
           let age = 30;
           var salary = 10000;
         }
         console.log(salary); //10000 (accessible to due function scope)
         console.log(age); //error: age is not defined(due to block scope)
      }

  7. What is Hoisting?
     Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution

     console.log(message); //output : undefined
     var message = ’The variable Has been hoisted’;

     Interpretation:-

     var message;
     console.log(message);
     message = ’The variable Has been hoisted’;

  8. Classes in ES6?
      a. Prototype based inherientance:-
          function Bike(model,color) {
            this.model = model;
            this.color = color;
          }

          Bike.prototype.getDetails = function() {
            return this.model+ ' bike has' + this.color+ ' color';
          };

      b. ES6 classes:-
      class Bike{
        constructor(color, model) {
            this.color= color;
            this.model= model;
        }
      }

  9. What are closures?
     A closure is a function defined inside another function (called parent function) and has access to the variable which is declared and defined in parent function scope.

     function outer() {
       var b = 10;
       function inner() {
             var a = 20;
             console.log(a+b);
        }
       return inner;
     }

  10. Scope in javascript?
     Scope determines the accessibility (visibility) of variables.

     Local Javascript:- Variables declared within a JavaScript function.
     function myFunction() {
        var carName = "Volvo";
      }

      Global Javascript:- A variable declared outside a function.

      var carName = "Volvo";
      function myFunction() {

      }
