/*---------------------------------------JavaScript Array Every---------------*/
  /*----------------------Traditional Method---------------------*/
  var numbers = [1, 3, 5];
  var result = true;

  for (var i = 0; i < numbers.length; i++) {
    if (numbers[i] <= 0) {
        result = false;
        break;
    }
  }
  console.log(result); // true

  /*--------------------JavaScript array every() method---------------*/
  var numbers = [1, 3, 5];
  var result = numbers.every(function (e) {
      return e > 0;
  });
  console.log(result); // true

  var isEven = numbers.every(function (e) {
      return e % 2 == 0;
  });
  console.log(isEven); // false

  var isOdd = numbers.every(function (e) {
      return Math.abs(e % 2) == 1;
  });
  console.log(isOdd);// true

  /*--------------------JavaScript array some() method---------------*/
  var scores = [10, 15, 20];

  var someOdd = scores.some(function (e) {
      return Math.abs(e % 2) == 1;
  });
  console.log(someOdd); // true

/*-------------------------------------JavaScript Array Filter----------------*/
  var cities = [
    {name: 'Los Angeles', population: 3792621},
    {name: 'New York', population: 8175133},
    {name: 'Chicago', population: 2695598},
    {name: 'Houston', population: 2099451},
    {name: 'Philadelphia', population: 1526006}
  ];

  /*----------------Traditional Way-----------------*/

  var bigCities = [];
  for (var i = 0; i < cities.length; i++) {
      if (cities[i].population > 3000000) {
          bigCities.push(cities[i]);
      }
  }
  console.log(bigCities);

  /*---------------Filter Way----------------------*/

  var bigCities = cities.filter(function (e) {
      return e.population > 3000000;
  });
  console.log(bigCities);

  var bigCities = cities.filter(e => e > 3000000);
  console.log(bigCities);

  /*--------------More Examples--------------------*/

  cities.filter(function (e) {
      return e.population < 3000000;
  }).sort(function (a, b) {
      return b.population - a.population;
  }).map(function (e) {
      console.log(e.name + ':' + e.population);
  });

  cities.filter(e => e.population < 3000000)
  .sort((a, b) => (b.population - a.population))
  .map(e => console.log(e.name + ':' + e.population));

/*-------------------------------JavaScript Array forEach---------------------*/
  var ranks = ['A', 'B', 'C'];
  /*---------------------Traditional Way----------------------*/
  for (var i = 0; i < ranks.length; i++) {
      console.log(ranks[i]);
  }

  /*-----------------------ForEach Way-----------------------*/
  ranks.forEach(function (e) {
      console.log(e);
  });

  var counter = new Counter();
  var numbers = [1, 2, 3];
  var sum = 0;
  numbers.forEach(function (e) {
      sum += e;
      this.increase();
  }, counter);

  console.log(sum); // 6
  console.log(counter.current()); // 3

/*-------------------------Javascript Map-------------------------------------*/
  let newArray = array.map((currentValue, index, array) => {
       // return element to new Array
  });

  newArray - the array that is returned
  array - the array on which the map method is called
  currentValue - the value being processed
  index - the index of the current value being processed

  /*------------------------Tradional Array Push---------------------*/
  const array = [2, 5, 9];
  let squares = [];

  for (let i = 0; i < array.length; i++) {
      squares.push(array[i] * array[i]));
  }

  console.log(squares); // [4, 25, 81]
  console.log(array); // [2, 5, 9]

  /*---------------------Map Array Way-------------------------------*/

  const array = [2, 5, 9];
  let squares = array.map((num) => num * num);

  console.log(squares); // [4, 25, 81]
  console.log(array); // [2, 5, 9]

  const girls = [
   {name: 'Sarah', age: 19},
   {name: 'Laura', age: 10},
   {name: 'Jessy', age: 29},
   {name: 'Amy', age: 23}];

  let girlsAges = girls.map((girl) => girl.age);

  console.log(girlsAges);  //[19, 10, 29, 23]
