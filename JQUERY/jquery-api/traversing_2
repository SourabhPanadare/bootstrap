a. .map( callback ):- Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.

    var numbers = [65, 44, 12, 4];

    function myFunction(num) {
      return num * 10;
    }

    numbers.map(myFunction)

    O/p:- 650,440,120,40

    var persons = [
      {firstname : "Malcom", lastname: "Reynolds"},
      {firstname : "Kaylee", lastname: "Frye"},
      {firstname : "Jayne", lastname: "Cobb"}
    ];

    function getFullName(item) {
      var fullname = [item.firstname,item.lastname].join(" ");
      return fullname;
    }

    persons.map(getFullName);

    O/P:- Malcom Reynolds,Kaylee Frye,Jayne Cobb

b.  .not( selector ):- Remove elements from the set of matched elements.

    <ul>
      <li>list item 1</li>(0 index, odd)
      <li>list item 2</li>(1 index, even)
      <li>list item 3</li>(2 index, odd)
      <li>list item 4</li>(3 index, even)
      <li>list item 5</li>(4 index, odd)
    </ul>

    $( "li" ).not( ":even" ).css( "background-color", "red" );

    O/p:- red background for items 2 and 4

c. .siblings( [selector ] ):- Get the siblings of each element in the set of matched elements, optionally filtered by a selector.

    <ul>
      <li>list item 1</li>
      <li>list item 2</li>
      <li class="third-item">list item 3</li>
      <li>list item 4</li>
      <li>list item 5</li>
    </ul>

    $( "li.third-item" ).siblings().css( "background-color", "red" );
    O/p:- red background behind items 1, 2, 4, and 5.

d. .slice( start [, end ] ):- Reduce the set of matched elements to a subset specified by a range of indices.

    <ul>
      <li>list item 1</li>
      <li>list item 2</li>
      <li>list item 3</li>
      <li>list item 4</li>
      <li>list item 5</li>
    </ul>

    $( "li" ).slice( 2 ).css( "background-color", "red" );
    O/P:-  red background for items 3, 4, and 5.

    $( "li" ).slice( 2, 4 ).css( "background-color", "red" );
    O/P:- items 3 and 4 are selected

e. .parent( [selector ] ):- Get the parent of each element in the current set of matched elements, optionally filtered by a selector.

    <div><p>Hello</p></div>
    <div class="selected"><p>Hello Again</p></div>

    $( "p" ).parent( ".selected" ).css( "background", "yellow" );
    O/P:- Hello Again has yellow background

f. .parents( [selector ] ):- Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.

    <div style="width:500px;">div (great-grandparent)
    <ul>ul (grandparent)
      <li>li (direct parent)
        <span>span</span>
      </li>
    </ul>
    </div>

    $("span").parents().css({"color": "red", "border": "2px solid red"}); // All Element have red corder excepts span.

g. .next( [selector ] ):- Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
   .prev( [selector ] ):-  Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.
   .nextAll( [selector ] ):- Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
   .prevAll( [selector ] ):- Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.

    <ul>
        <li>list item 1</li>
        <li>list item 2</li>
        <li class="third-item">list item 3</li>
        <li>list item 4</li>
        <li>list item 5</li>
    </ul>

    $( "li.third-item" ).next().css( "background-color", "red" );
    O/P:- red background behind item 4

    $( "li.third-item" ).prev().css( "background-color", "red" );
    O/P:- red background behind item 2

    $( "li.third-item" ).nextAll().css( "background-color", "red" );
    O/P:- red background behind items 4 and 5

    $( "li.third-item" ).prevAll().css( "background-color", "red" );
    O/P:- red background behind items 1 and 2
